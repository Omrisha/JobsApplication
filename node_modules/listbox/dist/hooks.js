"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFindTypedItem = void 0;

var _react = require("react");

// Only works with domElements. Could this be further generalized?
// This hook returns a function that accepts a typed character code
// and domElements with text content. It will return the node that
// matches the typed character(s) within the delay. The function uses
// refs to hold values between renders.
var useFindTypedItem = function useFindTypedItem() {
  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;
  var cacheTypedChars = (0, _react.useRef)("");
  var timeoutId = (0, _react.useRef)(null);
  return function (charCode, domElements) {
    cacheTypedChars.current += String.fromCharCode(charCode).toLowerCase();

    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }

    timeoutId.current = setTimeout(function () {
      return cacheTypedChars.current = "";
    }, delay);

    if (cacheTypedChars.current) {
      var foundItem = domElements.filter(function (node) {
        return node.textContent.toLowerCase().startsWith(cacheTypedChars.current);
      })[0];
      return foundItem;
    }
  };
};

exports.useFindTypedItem = useFindTypedItem;