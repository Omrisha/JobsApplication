"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = exports.OptionsList = exports.Listbox = void 0;

var _react = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _constants = require("../constants");

var _utils = require("../utils");

var _hooks = require("../hooks");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ListboxContext = (0, _react.createContext)();

var Listbox = _react["default"].forwardRef(function (props, ref) {
  var grid = props.grid,
      focused = props.focused,
      children = props.children,
      onKeyDown = props.onKeyDown,
      highlight = props.highlight,
      updateValue = props.updateValue,
      onAriaSelect = props.onAriaSelect,
      activeStyles = props.activeStyles,
      controlledActiveId = props.activeId,
      controlledActiveIndex = props.activeIndex,
      controlledHighlightIndex = props.highlightIndex,
      restProps = _objectWithoutProperties(props, ["grid", "focused", "children", "onKeyDown", "highlight", "updateValue", "onAriaSelect", "activeStyles", "activeId", "activeIndex", "highlightIndex"]);

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      _activeId = _useState2[0],
      setActiveId = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      _activeIndex = _useState4[0],
      setActiveIndex = _useState4[1];

  var _useState5 = (0, _react.useState)(),
      _useState6 = _slicedToArray(_useState5, 2),
      _highlightIndex = _useState6[0],
      setHighlightIndex = _useState6[1];

  var controlled = controlledActiveIndex != null;
  var activeId = controlled ? controlledActiveId : _activeId;
  var activeIndex = controlled ? controlledActiveIndex : _activeIndex;
  var highlightIndex = controlled ? controlledHighlightIndex : _highlightIndex;

  var selectFromElement = function selectFromElement(element) {
    var id = element.id,
        dataset = element.dataset,
        textContent = element.textContent;
    var index = Number(dataset.index);
    selectOption(index, id, textContent);
  };

  var selectOption = function selectOption(index, id, selectedItem) {
    updateValue({
      activeId: id,
      activeIndex: index,
      selectedItem: selectedItem
    });

    if (!controlled) {
      setActiveId(id);
      setActiveIndex(index);
    }
  };

  var listboxRef = (0, _react.useRef)();
  var findTypedInDomNodes = (0, _hooks.useFindTypedItem)();

  var checkKeyPress = function checkKeyPress(event) {
    var activeNode = document.getElementById(activeId);
    var nextItem = (0, _utils.getNextDomItem)({
      event: event,
      activeNode: activeNode,
      findTypedInDomNodes: findTypedInDomNodes
    });

    if (nextItem) {
      (0, _utils.focusElement)(nextItem, event.target);
      selectFromElement(nextItem);
    }
  };
  /**
   * Handles setting the next active option in a grid based listbox.
   * @param {Object} e
   */


  var checkKeyPressGrid = function checkKeyPressGrid(e) {
    var key = e.keyCode || e.which;
    if (!_constants.LIST_BOX_KEYS.includes(key)) return;
    e.preventDefault();
    var nextItem;
    var activeNode = document.getElementById(activeId);
    var currentCoords = activeNode.id.slice(_constants.ID_PREFIX.length).split("-");

    switch (e.which || e.keyCode) {
      case _constants.KEY_CODE.left:
        nextItem = activeNode.previousElementSibling;
        break;

      case _constants.KEY_CODE.right:
        nextItem = activeNode.nextElementSibling;
        break;

      case _constants.KEY_CODE.up:
        currentCoords[0] = Number(currentCoords[0]) - 1;
        var nextCoords = currentCoords.join("-");
        var nextActiveId = _constants.ID_PREFIX + nextCoords;
        nextItem = document.getElementById(nextActiveId);
        break;

      case _constants.KEY_CODE.down:
        currentCoords[0] = Number(currentCoords[0]) + 1;
        var nextCoords = currentCoords.join("-");
        var nextActiveId = _constants.ID_PREFIX + nextCoords;
        nextItem = document.getElementById(nextActiveId);
        break;

      default:
        throw new Error("Unsupported listbox key.");
    }

    if (nextItem) selectFromElement(nextItem);
  };

  var handleKeyDown = function handleKeyDown(e) {
    onKeyDown(e);
    grid ? checkKeyPressGrid(e) : checkKeyPress(e);
  };

  (0, _react.useEffect)(function () {
    if (focused) listboxRef.current.focus();
  }, [focused]);
  (0, _react.useEffect)(function () {
    if (controlled) {
      if (activeIndex > -1) {
        onAriaSelect("".concat(_constants.ID_PREFIX, "0-").concat(activeIndex));
      }
    }
  }, [controlledActiveIndex]);
  var index = 0;

  var clonedChildren = _react["default"].Children.toArray(children).filter(function (child) {
    return typeof child.type === "function";
  }).map(function (OptionsList, row) {
    return _react["default"].cloneElement(OptionsList, {
      children: _react["default"].Children.map(OptionsList.props.children, function (Option, col) {
        var value = Option.props.value;
        var optionIndex = index;
        index++;
        var id = "".concat(_constants.ID_PREFIX).concat(row, "-").concat(col);
        return _react["default"].cloneElement(Option, {
          id: id,
          index: optionIndex,
          textContent: value ? value : (0, _utils.getDeepestChild)(Option)
        });
      })
    });
  }); // See: https://reactjs.org/docs/context.html#caveats


  var context = {
    highlight: highlight,
    activeIndex: activeIndex,
    activeStyles: activeStyles,
    selectOption: selectOption,
    highlightIndex: highlightIndex,
    setHighlightIndex: setHighlightIndex
  };
  return _react["default"].createElement(ListboxContext.Provider, {
    value: context
  }, _react["default"].createElement("div", _extends({
    tabIndex: 0,
    role: "listbox",
    ref: ref === null ? listboxRef : ref,
    "aria-activedescendant": activeId,
    onKeyDown: handleKeyDown,
    onFocus: function onFocus(e) {
      if (activeId === undefined) {
        setActiveId("".concat(_constants.ID_PREFIX, "0-0"));
        setActiveIndex(0);
      }
    }
  }, restProps), clonedChildren));
});

exports.Listbox = Listbox;
Listbox.propTypes = {
  activeIndex: PropTypes.number,
  activeId: PropTypes.string,
  activeStyles: PropTypes.object,
  className: PropTypes.string,
  children: PropTypes.node.isRequired,
  focused: PropTypes.bool,
  grid: PropTypes.bool,
  highlight: PropTypes.bool,
  id: PropTypes.string,
  onAriaSelect: PropTypes.func,
  onKeyDown: PropTypes.func,
  style: PropTypes.object,
  updateValue: PropTypes.func
};
Listbox.defaultProps = {
  activeIndex: undefined,
  activeId: undefined,
  activeStyles: {
    background: "#BDE4FF"
  },
  className: "",
  children: null,
  focused: false,
  grid: false,
  highlight: false,
  id: "",
  onAriaSelect: function onAriaSelect() {},
  onKeyDown: function onKeyDown() {},
  style: {},
  updateValue: function updateValue() {}
};

var OptionsList = function OptionsList(_ref) {
  var children = _ref.children,
      restProps = _objectWithoutProperties(_ref, ["children"]);

  return _react["default"].createElement("div", restProps, children);
};

exports.OptionsList = OptionsList;

var Option = _react["default"].forwardRef(function (props, ref) {
  var id = props.id,
      index = props.index,
      value = props.value,
      style = props.style,
      textContent = props.textContent,
      _onMouseEnter = props.onMouseEnter,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["id", "index", "value", "style", "textContent", "onMouseEnter", "children"]);

  var _useContext = (0, _react.useContext)(ListboxContext),
      highlight = _useContext.highlight,
      activeIndex = _useContext.activeIndex,
      activeStyles = _useContext.activeStyles,
      selectOption = _useContext.selectOption,
      highlightIndex = _useContext.highlightIndex,
      setHighlightIndex = _useContext.setHighlightIndex;

  var isSelected = index === activeIndex;
  var isHighlighted = index === highlightIndex;
  activeStyles = (isSelected || isHighlighted) && activeStyles;
  return _react["default"].createElement("div", _extends({
    id: id,
    role: "option",
    "data-index": index,
    onClick: function onClick() {
      return selectOption(index, id, textContent);
    },
    onMouseEnter: function onMouseEnter() {
      if (highlight) setHighlightIndex(index);

      _onMouseEnter(index, id);
    },
    ref: isSelected ? ref : null,
    "aria-selected": isSelected || undefined,
    style: _objectSpread({}, style, {}, activeStyles)
  }, restProps), children);
});

exports.Option = Option;
Option.propTypes = {
  className: PropTypes.string,
  onMouseEnter: PropTypes.func
};
Option.defaultProps = {
  className: "",
  onMouseEnter: function onMouseEnter() {}
};