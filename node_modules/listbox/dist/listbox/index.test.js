"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _index = require("./index");

var _constants = require("../constants.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

afterEach(_react2.cleanup);
beforeAll(function () {
  if (!HTMLElement.prototype.scrollIntoView) {
    HTMLElement.prototype.scrollIntoView = function () {};
  }
});
test("render listbox with the first option selected (snapshot)", function () {
  // Given
  var titleId = "lb-title";

  var _render = (0, _react2.render)(_react["default"].createElement("div", null, _react["default"].createElement("span", {
    id: titleId
  }, "Delicious Fruits"), _react["default"].createElement(_index.Listbox, {
    "aria-labelledby": titleId
  }, _react["default"].createElement(_index.OptionsList, null, ["Apple", "Bananna", "Carrot"].map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, _react["default"].createElement("div", {
      style: {
        color: "black"
      }
    }, fruit));
  }))))),
      getByRole = _render.getByRole;

  var listboxNode = getByRole("listbox");
  var eventProperties = {
    key: "ArrowDown",
    keyCode: _constants.KEY_CODE.down,
    which: _constants.KEY_CODE.down
  }; // When

  listboxNode.focus();

  _react2.fireEvent.keyDown(listboxNode, eventProperties); // Then


  expect(listboxNode).toMatchSnapshot();
});
test("renders the listbox when user adds native elements as children of listbox (snapshot)", function () {
  var _render2 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    "aria-labelledby": "lb-title",
    focused: true
  }, _react["default"].createElement("h1", null, "Fruits"), " ", _react["default"].createElement(_index.OptionsList, null, _react["default"].createElement(_index.Option, null, "Apple"), _react["default"].createElement(_index.Option, null, "Bananna"), _react["default"].createElement(_index.Option, null, "Carrot")))),
      container = _render2.container;

  expect(container).toMatchSnapshot();
});
test("renders listbox with a label", function () {
  var titleId = "lb-title";

  var _render3 = (0, _react2.render)(_react["default"].createElement("div", null, _react["default"].createElement("span", {
    id: titleId
  }, "Delicious Fruits"), _react["default"].createElement(_index.Listbox, {
    "aria-labelledby": titleId
  }, _react["default"].createElement(_index.OptionsList, null, ["Apple", "Bananna", "Carrot"].map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  }))))),
      getByRole = _render3.getByRole;

  var listboxNode = getByRole("listbox");
  expect(listboxNode).toHaveAttribute("aria-labelledby", titleId);
});
test("listbox is focused and selects first option on mount when passed the focus prop", function () {
  var _render4 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    focused: true
  }, _react["default"].createElement(_index.OptionsList, null, ["Apple", "Bananna", "Carrot"].map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByRole = _render4.getByRole;

  var listboxNode = getByRole("listbox");
  expect(listboxNode).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-0"));
  expect(listboxNode).toHaveFocus();
});
test("should select the second option using arrow key navigation", function () {
  // Given
  var APPLE = "Apple";
  var BANANNA = "Bananna";
  var CARROT = "Carrot";
  var fruits = [APPLE, BANANNA, CARROT];

  var _render5 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, null, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByText = _render5.getByText,
      getByRole = _render5.getByRole;

  var listboxNode = getByRole("listbox");
  var eventProperties = {
    key: "ArrowDown",
    keyCode: _constants.KEY_CODE.down,
    which: _constants.KEY_CODE.down
  }; // When

  listboxNode.focus();
  expect(getByText(APPLE)).toHaveAttribute("aria-selected", "true");

  _react2.fireEvent.keyDown(listboxNode, eventProperties);

  expect(getByText(APPLE)).not.toHaveAttribute("aria-selected");
  expect(getByText(BANANNA)).toHaveAttribute("aria-selected", "true");

  _react2.fireEvent.keyDown(listboxNode, eventProperties);

  expect(getByText(APPLE)).not.toHaveAttribute("aria-selected");
  expect(getByText(BANANNA)).not.toHaveAttribute("aria-selected");
  expect(getByText(CARROT)).toHaveAttribute("aria-selected", "true"); // Then

  var activeIdx = fruits.indexOf(CARROT);
  expect(listboxNode).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-").concat(activeIdx));
});
test("type a character: selects and focuses the next option that starts with the typed character", function () {
  // Given
  var BANANNA = "Bananna";
  var fruits = ["Apple", BANANNA, "Carrot"];

  var _render6 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, null, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByRole = _render6.getByRole;

  var listboxNode = getByRole("listbox");
  var eventProperties = {
    key: "b",
    which: 66,
    keyCode: 66
  }; // When

  _react2.fireEvent.keyDown(listboxNode, eventProperties); // Then


  var activeIdx = fruits.indexOf(BANANNA);
  expect(getByRole("listbox").getAttribute("aria-activedescendant")).toBe("".concat(_constants.ID_PREFIX, "0-").concat(activeIdx));
});
test("type multiple characters in rapid succession: focus moves to next item with a name that starts with the string of characters typed.", function () {
  // Given
  var transuraniumElements = ["Plutonium", "Americium", "Curium", "Berkelium", "Californium", "Moscovium", "Tennessine"];

  var _render7 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, null, _react["default"].createElement(_index.OptionsList, null, transuraniumElements.map(function (element) {
    return _react["default"].createElement(_index.Option, {
      key: element
    }, element);
  })))),
      getByRole = _render7.getByRole;

  var listboxNode = getByRole("listbox"); // When

  _react2.fireEvent.keyDown(listboxNode, {
    key: "c",
    which: 67,
    keyCode: 67
  });

  _react2.fireEvent.keyDown(listboxNode, {
    key: "a",
    which: 65,
    keyCode: 65
  }); // Then


  var activeIdx = transuraniumElements.indexOf("Californium");
  expect(listboxNode.getAttribute("aria-activedescendant")).toBe("".concat(_constants.ID_PREFIX, "0-").concat(activeIdx));
});
test("calls updateValue prop with the new listbox state when user types multiple characters in rapid succession", function () {
  // Given
  var CALIFORNIUM = "Californium";
  var transuraniumElements = ["Plutonium", "Americium", "Curium", "Berkelium", CALIFORNIUM, "Moscovium", "Tennessine"];
  var SELECTED_IDX = transuraniumElements.indexOf(CALIFORNIUM);
  var updateValue = jest.fn();

  var _render8 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    updateValue: updateValue
  }, _react["default"].createElement(_index.OptionsList, null, transuraniumElements.map(function (element) {
    return _react["default"].createElement(_index.Option, {
      key: element
    }, element);
  })))),
      getByRole = _render8.getByRole;

  var listboxNode = getByRole("listbox"); // When

  var keyEvents = [{
    key: "c",
    which: 67,
    keyCode: 67
  }, {
    key: "a",
    which: 65,
    keyCode: 65
  }];
  keyEvents.forEach(function (event) {
    return _react2.fireEvent.keyDown(listboxNode, event);
  }); // Then

  expect(updateValue).toBeCalledTimes(keyEvents.length);
  expect(updateValue).toHaveBeenLastCalledWith({
    activeId: "".concat(_constants.ID_PREFIX, "0-").concat(SELECTED_IDX),
    activeIndex: SELECTED_IDX,
    selectedItem: CALIFORNIUM
  });
});
test("should expose the index and id of the option when user mouseEnters the option", function () {
  // Given
  var CALIFORNIUM = "Californium";
  var transuraniumElements = ["Americium", "Curium", "Berkelium", CALIFORNIUM, "Moscovium", "Tennessine"];
  var CALIFORNIUM_IDX = transuraniumElements.indexOf(CALIFORNIUM);
  var onMouseEnter = jest.fn();

  var _render9 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    activeIndex: -1,
    highlight: true
  }, _react["default"].createElement(_index.OptionsList, null, transuraniumElements.map(function (element) {
    return _react["default"].createElement(_index.Option, {
      onMouseEnter: onMouseEnter,
      key: element
    }, element);
  })))),
      getByText = _render9.getByText;

  var californiumOption = getByText(CALIFORNIUM); // When

  _react2.fireEvent.mouseEnter(californiumOption); // Then


  expect(onMouseEnter).toBeCalledTimes(1);
  expect(onMouseEnter).toHaveBeenLastCalledWith(transuraniumElements.indexOf(CALIFORNIUM), "".concat(_constants.ID_PREFIX, "0-").concat(CALIFORNIUM_IDX));
});
test("calls updateValue prop when listbox option selection changes", function () {
  // Given
  var APPLE = "Apple";
  var BANANNA = "Bananna";
  var CARROT = "Carrot";
  var fruits = [APPLE, BANANNA, CARROT];
  var updateValue = jest.fn();

  var _render10 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    updateValue: updateValue
  }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByText = _render10.getByText,
      getByRole = _render10.getByRole;

  var listboxNode = getByRole("listbox");
  var eventProperties = {
    key: "ArrowDown",
    keyCode: _constants.KEY_CODE.down,
    which: _constants.KEY_CODE.down
  };
  listboxNode.focus();
  expect(getByText(APPLE)).toHaveAttribute("aria-selected", "true");
  expect(listboxNode).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-0")); // When

  _react2.fireEvent.keyDown(listboxNode, eventProperties); // TODO: assert that updateValue was called with activeItem, activeOptionId, textContent.
  // And then


  expect(updateValue).toBeCalledTimes(1); // And when

  _react2.fireEvent.click(getByText(APPLE)); // And then


  expect(updateValue).toBeCalledTimes(2);
});
test("able to navigate a grid based listbox with keyboard navigation", function () {
  // Given
  var updateValue = jest.fn();

  var _render11 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    grid: true,
    updateValue: updateValue
  }, _react["default"].createElement(_index.OptionsList, null, _react["default"].createElement(_index.Option, null, "One"), _react["default"].createElement(_index.Option, null, "Two"), _react["default"].createElement(_index.Option, null, "Three")), _react["default"].createElement(_index.OptionsList, null, _react["default"].createElement(_index.Option, null, "Four"), _react["default"].createElement(_index.Option, null, "Five"), _react["default"].createElement(_index.Option, null, "Six")))),
      getByRole = _render11.getByRole;

  var listboxNode = getByRole("listbox");
  listboxNode.focus();
  expect(listboxNode).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-0")); // When
  // Navigate down one row

  _react2.fireEvent.keyDown(listboxNode, {
    keyCode: _constants.KEY_CODE.down
  }); // Navigate right one column


  _react2.fireEvent.keyDown(listboxNode, {
    keyCode: _constants.KEY_CODE.right
  }); // Navigate right another column


  _react2.fireEvent.keyDown(listboxNode, {
    keyCode: _constants.KEY_CODE.right
  }); // Then


  expect(listboxNode).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "1-2"));
  expect(updateValue).toBeCalledTimes(3);
  expect(updateValue).toHaveBeenLastCalledWith({
    activeId: "".concat(_constants.ID_PREFIX, "1-2"),
    activeIndex: 5,
    selectedItem: "Six"
  });
});
test("clicking an option should focus and highlight that option", function () {
  // Given
  var APPLE = "Apple";
  var BANANNA = "Bananna";
  var CARROT = "Carrot";
  var fruits = [APPLE, BANANNA, CARROT];

  var _render12 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, null, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByText = _render12.getByText,
      getByRole = _render12.getByRole;

  var listbox = getByRole("listbox");
  var carrotNode = getByText(CARROT);
  expect(listbox).not.toHaveAttribute("aria-activedescendant");
  expect(carrotNode).not.toHaveAttribute("aria-selected", "true"); // When

  var idx = fruits.indexOf(CARROT);

  _react2.fireEvent.click(carrotNode); // Then


  expect(listbox).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-").concat(idx));
  expect(carrotNode).toHaveAttribute("aria-selected", "true");
});
test("highlights the option on mouse enter when listbox is provided the highlight prop", function () {
  // Given
  var BANANNA = "Bananna";
  var fruits = ["Apple", "Bananna", "Carrot"];
  var activeStyle = "background: rgb(189, 228, 255);";

  var _render13 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    highlight: true
  }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByText = _render13.getByText;

  var OPTION_TO_HIGHLIGHT = getByText(BANANNA);
  fruits.forEach(function (fruit) {
    expect(getByText(fruit)).not.toHaveStyle(activeStyle);
  }); // When

  _react2.fireEvent.mouseEnter(OPTION_TO_HIGHLIGHT); // Then


  fruits.forEach(function (fruit) {
    var node = getByText(fruit);

    if (fruit === BANANNA) {
      expect(node).toHaveStyle(activeStyle);
    } else {
      expect(node).not.toHaveStyle(activeStyle);
    }
  });
});
test("calls the onMouseEnter event for an option with activeIndex & activeId", function () {
  // Given
  var BANANNA = "Bananna";
  var fruits = ["Apple", "Bananna", "Carrot"];
  var onMouseEnter = jest.fn();

  var _render14 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, null, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit,
      onMouseEnter: onMouseEnter
    }, fruit);
  })))),
      getByText = _render14.getByText;

  var BANANNA_ELEMENT = getByText(BANANNA); // When

  _react2.fireEvent.mouseEnter(BANANNA_ELEMENT); // Then


  expect(onMouseEnter).toBeCalledTimes(1);
  expect(onMouseEnter).toHaveBeenLastCalledWith(fruits.indexOf(BANANNA), "".concat(_constants.ID_PREFIX, "0-").concat(fruits.indexOf(BANANNA)));
});
test("highlights the correct option for a controlled listbox", function () {
  // Given
  var ACTIVE_STYLE = "background: rgb(189, 228, 255);";
  var APPLE = "Apple";
  var BANANNA = "Bananna";
  var CARROT = "Carrot";
  var fruits = [APPLE, BANANNA, CARROT];

  var _render15 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    activeIndex: 0,
    highlightIndex: 2
  }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return _react["default"].createElement(_index.Option, {
      key: fruit
    }, fruit);
  })))),
      getByText = _render15.getByText;

  var appleNode = getByText(APPLE);
  var banannaNode = getByText(BANANNA);
  var carrotNode = getByText(CARROT); // THEN

  expect(appleNode).toHaveAttribute("style", ACTIVE_STYLE);
  expect(banannaNode).not.toHaveAttribute("style");
  expect(carrotNode).toHaveAttribute("style", ACTIVE_STYLE);
});
test("selects the correct option when a user keys down on an controlled listbox component", function () {
  // Given
  var CARROT = "Carrot";
  var fruits = ["Apple", "Bananna", CARROT];
  var carrotIdx = fruits.indexOf(CARROT);

  var Comp = function Comp() {
    var _useState = (0, _react.useState)(),
        _useState2 = _slicedToArray(_useState, 2),
        activeIndex = _useState2[0],
        setActiveIndex = _useState2[1];

    var _useState3 = (0, _react.useState)(),
        _useState4 = _slicedToArray(_useState3, 2),
        activeId = _useState4[0],
        setActiveId = _useState4[1];

    var selectCarrot = function selectCarrot() {
      setActiveId("".concat(_constants.ID_PREFIX, "0-").concat(carrotIdx));
      setActiveIndex(carrotIdx);
    };

    return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("button", {
      onClick: selectCarrot
    }, "Select Carrot"), _react["default"].createElement(_index.Listbox, {
      activeIndex: activeIndex,
      activeId: activeId
    }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
      return _react["default"].createElement(_index.Option, {
        key: fruit
      }, fruit);
    }))));
  };

  var _render16 = (0, _react2.render)(_react["default"].createElement(Comp, null)),
      getByText = _render16.getByText,
      getByRole = _render16.getByRole;

  var button = getByText("Select Carrot");
  var listbox = getByRole("listbox");
  var carrotNode = getByText(CARROT);
  expect(listbox).not.toHaveAttribute("aria-activedescendant");
  expect(carrotNode).not.toHaveAttribute("aria-selected"); // When

  _react2.fireEvent.click(button); // Then


  expect(listbox).toHaveAttribute("aria-activedescendant", "".concat(_constants.ID_PREFIX, "0-").concat(carrotIdx));
  expect(carrotNode).toHaveAttribute("aria-selected");
});
test("calls onAriaSelect for a controlled listbox component when aria focus changes", function () {
  var CARROT = "Carrot";
  var fruits = ["Apple", "Bananna", CARROT];
  var carrotIdx = fruits.indexOf(CARROT);
  var onAriaSelect = jest.fn();

  var Comp = function Comp() {
    var _useState5 = (0, _react.useState)(),
        _useState6 = _slicedToArray(_useState5, 2),
        activeIndex = _useState6[0],
        setActiveIndex = _useState6[1];

    var selectCarrot = function selectCarrot() {
      return setActiveIndex(carrotIdx);
    };

    return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("button", {
      onClick: selectCarrot
    }, "Select Carrot"), _react["default"].createElement(_index.Listbox, {
      activeIndex: activeIndex,
      onAriaSelect: onAriaSelect
    }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
      return _react["default"].createElement(_index.Option, {
        key: fruit
      }, fruit);
    }))));
  };

  var _render17 = (0, _react2.render)(_react["default"].createElement(Comp, null)),
      getByText = _render17.getByText,
      getByRole = _render17.getByRole;

  var button = getByText("Select Carrot");
  var listbox = getByRole("listbox");
  var carrotNode = getByText(CARROT);
  expect(listbox).not.toHaveAttribute("aria-activedescendant");
  expect(carrotNode).not.toHaveAttribute("aria-selected"); // When

  _react2.fireEvent.click(button); // Then


  expect(onAriaSelect).toBeCalledTimes(1);
  expect(onAriaSelect).toHaveBeenLastCalledWith("".concat(_constants.ID_PREFIX, "0-").concat(carrotIdx));
});
test("should select the value prop for Option if it contains a complex markup", function () {
  // Given
  var CARROT = "Carrot";
  var fruits = ["Apple", "Bananna", CARROT];
  var CARROT_IDX = fruits.indexOf(CARROT);
  var updateValue = jest.fn();

  var _render18 = (0, _react2.render)(_react["default"].createElement(_index.Listbox, {
    updateValue: updateValue
  }, _react["default"].createElement(_index.OptionsList, null, fruits.map(function (fruit) {
    return (// When a user selects an option, Listbox should expose the fruit value
      // "Carrot" as the value being selected and not include other text values,
      // for example "|" and "On Sale!"
      _react["default"].createElement(_index.Option, {
        key: fruit,
        value: fruit
      }, _react["default"].createElement("div", null, fruit), _react["default"].createElement("span", null, "|"), _react["default"].createElement("div", null, "On Sale!"))
    );
  })))),
      getByText = _render18.getByText;

  var carrotNode = getByText(CARROT); // When

  _react2.fireEvent.click(carrotNode); // Then


  expect(updateValue).toBeCalledTimes(1);
  expect(updateValue).toHaveBeenLastCalledWith({
    activeId: "".concat(_constants.ID_PREFIX, "0-").concat(CARROT_IDX),
    activeIndex: CARROT_IDX,
    selectedItem: CARROT
  });
});